 
import java.util.Scanner;
 
public class Inverse 
{
    public static void main(String argv[]) 
    {
        Scanner input = new Scanner(System.in);
        System.out.println("Enter the dimension of square matrix: ");
        int n = input.nextInt();
        double a[][]= new double[n][n];
        System.out.println("Enter the elements of matrix: ");
        for(int i=0; i<n; i++)
            for(int j=0; j<n; j++)
                a[i][j] = input.nextDouble();
 
        double d[][] = invert(a);
 
        System.out.println("The inverse is: ");
        for (int i=0; i<n; ++i) 
        {
            for (int j=0; j<n; ++j)
            {
                System.out.print(d[i][j]+"  ");
            }
            System.out.println();
        }
        input.close();
    }	
 
    public static double[][] invert(double a[][]) 
    {
        int n = a.length;
        double x[][] = new double[n][n];
        double b[][] = new double[n][n];
        int index[] = new int[n];
        for (int i=0; i<n; ++i) 
            b[i][i] = 1;
 
 // Transform the matrix into an upper triangle
        gaussian(a, index);
 
 // Update the matrix b[i][j] with the ratios stored
        for (int i=0; i<n-1; ++i)
            for (int j=i+1; j<n; ++j)
                for (int k=0; k<n; ++k)
                    b[index[j]][k]
                    	    -= a[index[j]][i]*b[index[i]][k];
 
 // Perform backward substitutions
        for (int i=0; i<n; ++i) 
        {
            x[n-1][i] = b[index[n-1]][i]/a[index[n-1]][n-1];
            for (int j=n-2; j>=0; --j) 
            {
                x[j][i] = b[index[j]][i];
                for (int k=j+1; k<n; ++k) 
                {
                    x[j][i] -= a[index[j]][k]*x[k][i];
                }
                x[j][i] /= a[index[j]][j];
            }
        }
        return x;
    }
 
// Method to carry out the partial-pivoting Gaussian
// elimination.  Here index[] stores pivoting order.
// this, right away, sorts each row based on the opmost
 
    public static void gaussian(double matrix[][], int index[]) 
    {
        int length = index.length;
        double rowMaximums[] = new double[length];
 
 // Initialize the index
        for (int i=0; i<length; i++) 
            index[i] = i;
 
 // Find the rescaling factors, one from each row
        for (int row=0; row<length; row++) {
            
            double max = 0;
            for (int col=0; col<length; col++) {
                double magnitude = Math.abs(matrix[row][col]);
                if (magnitude > max)
                    max = magnitude;
            }
            rowMaximums[i] = max;
        }
 
 // Search the pivoting element from each column
        int maxRow = 0;
        for (int col=0; col<length-1; col++) {
            double max = 0;
            for (int row = col; row<length; row++) {
                double magnitude = Math.abs(matrix[index[row]][col]);
                // we're anticipating the step where the maximum
                // element goes to the top
                magnitude /= rowMaximums[index[row]];
                if (magnitude > max) {
                    max = magnitude;
                    maxRow = row;
                }
            }
 
   // Interchange rows according to the pivoting order
            int tmp = index[col];
            index[col] = index[maxRow];
            index[maxRow] = tmp;
            for (int i=j+1; i<n; ++i) 	
            {
                double pj = a[index[i]][j]/a[index[j]][j];
 
 // Record pivoting ratios below the diagonal
                a[index[i]][j] = pj;
 
 // Modify other elements accordingly
                for (int l=j+1; l<n; ++l)
                    a[index[i]][l] -= pj*a[index[j]][l];
            }
        }
    }
}
